/*
 * Internal API of remote card management service
 * Internal API of remote card management service
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coinclave.crypto.applet.update.network.client;

import com.google.gson.reflect.TypeToken;
import io.coinclave.crypto.applet.update.network.invoker.ApiCallback;
import io.coinclave.crypto.applet.update.network.invoker.ApiClient;
import io.coinclave.crypto.applet.update.network.invoker.ApiException;
import io.coinclave.crypto.applet.update.network.invoker.ApiResponse;
import io.coinclave.crypto.applet.update.network.invoker.Configuration;
import io.coinclave.crypto.applet.update.network.invoker.Pair;
import io.coinclave.crypto.applet.update.network.models.CheckAppletVersionData;
import io.coinclave.crypto.applet.update.network.models.CheckAppletVersionResponse;
import io.coinclave.crypto.applet.update.network.models.CheckAppletsVersionRequest;
import io.coinclave.crypto.applet.update.network.models.NewAppletVersionRequest;
import io.coinclave.crypto.applet.update.network.models.StartCheckAppletsVersionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppletApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppletApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppletApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNewAppletVersion
     *
     * @param newAppletVersionRequest (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> Success add new applet version </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Error for validation input field </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addNewAppletVersionCall(NewAppletVersionRequest newAppletVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newAppletVersionRequest;

        // create path and map variables
        String localVarPath = "/remote-card-management/applets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewAppletVersionValidateBeforeCall(NewAppletVersionRequest newAppletVersionRequest, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = addNewAppletVersionCall(newAppletVersionRequest, _callback);
        return localVarCall;

    }

    /**
     * Add new applet version
     *
     * @param newAppletVersionRequest (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> Success add new applet version </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Error for validation input field </td><td>  -  </td></tr>
     * </table>
     */
    public void addNewAppletVersion(NewAppletVersionRequest newAppletVersionRequest) throws ApiException {
        addNewAppletVersionWithHttpInfo(newAppletVersionRequest);
    }

    /**
     * Add new applet version
     *
     * @param newAppletVersionRequest (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> Success add new applet version </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Error for validation input field </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> addNewAppletVersionWithHttpInfo(NewAppletVersionRequest newAppletVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewAppletVersionValidateBeforeCall(newAppletVersionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new applet version (asynchronously)
     *
     * @param newAppletVersionRequest (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> Success add new applet version </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Error for validation input field </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addNewAppletVersionAsync(NewAppletVersionRequest newAppletVersionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewAppletVersionValidateBeforeCall(newAppletVersionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for checkAppletVersion
     *
     * @param request   Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Success response for check applet version </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call initCheckAppletVersionCall(StartCheckAppletsVersionRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/remote-card-management/applets/check-version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    public okhttp3.Call processCheckAppletVersionCall(CheckAppletsVersionRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/remote-card-management/applets/check-version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initCheckAppletVersionValidateBeforeCall(StartCheckAppletsVersionRequest request, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'appletName' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'appletName' when calling checkAppletVersion(Async)");
        }


        okhttp3.Call localVarCall = initCheckAppletVersionCall(request, _callback);
        return localVarCall;

    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processCheckAppletVersionValidateBeforeCall(CheckAppletsVersionRequest request, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'appletName' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'appletName' when calling checkAppletVersion(Async)");
        }


        okhttp3.Call localVarCall = processCheckAppletVersionCall(request, _callback);
        return localVarCall;

    }

    /**
     * Check version of applet
     *
     * @param request Current version of applet (required)
     * @return CheckAppletVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Success response for check applet version </td><td>  -  </td></tr>
     * </table>
     */
    public CheckAppletVersionResponse initCheckAppletVersion(StartCheckAppletsVersionRequest request) throws ApiException {
        ApiResponse<CheckAppletVersionResponse> localVarResp = initCheckAppletVersionWithHttpInfo(request);
        return localVarResp.getData();
    }

    public CheckAppletVersionResponse processCheckAppletVersion(CheckAppletsVersionRequest request) throws ApiException {
        ApiResponse<CheckAppletVersionResponse> localVarResp = processCheckAppletVersionWithHttpInfo(request);
        return localVarResp.getData();
    }

    /**
     * Check version of applet
     *
     * @param request Current version of applet (required)
     * @return ApiResponse&lt;CheckAppletVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Success response for check applet version </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CheckAppletVersionResponse> initCheckAppletVersionWithHttpInfo(StartCheckAppletsVersionRequest request) throws ApiException {
        okhttp3.Call localVarCall = initCheckAppletVersionValidateBeforeCall(request, null);
        Type localVarReturnType = new TypeToken<CheckAppletVersionResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    public ApiResponse<CheckAppletVersionResponse> processCheckAppletVersionWithHttpInfo(CheckAppletsVersionRequest request) throws ApiException {
        okhttp3.Call localVarCall = processCheckAppletVersionValidateBeforeCall(request, null);
        Type localVarReturnType = new TypeToken<CheckAppletVersionResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check version of applet (asynchronously)
     *
     * @param request   Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Success response for check applet version </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call checkAppletVersionAsync(StartCheckAppletsVersionRequest request, final ApiCallback<CheckAppletVersionData> _callback) throws ApiException {

        okhttp3.Call localVarCall = initCheckAppletVersionValidateBeforeCall(request, _callback);
        Type localVarReturnType = new TypeToken<CheckAppletVersionData>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
